plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android-extensions'
    id 'kotlinx-serialization'
    id 'kotlin-kapt'
}

Properties accessManagerProp = new Properties()
accessManagerProp.load(new FileInputStream(file("../accessManager.properties")))
//服务器连接 0:线上后台，1：测试后台，2：本地后台
int debugUrl = 1

android {
    namespace 'com.smartwear.publicwatch'

    compileSdk 33

    signingConfigs {
        release {
            storeFile file(accessManagerProp['KEY_FILE'])
            storePassword accessManagerProp['STORE_PASSWORD']
            keyAlias accessManagerProp['KEY_ALIAS']
            keyPassword accessManagerProp['KEY_PASSWORD']
        }
    }

    defaultConfig {
        applicationId "com.smartwear.publicwatch"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0.0" //versionName X.Y.Z ---> XY=“versionCode”X十位Y个位,Z=正式版本0，测试版本1..累加
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false     //关闭混淆
            shrinkResources false   //用反射机制来加载图片或布局添加时false
            signingConfig signingConfigs.release
            switch (debugUrl) {
                case 0:
                    (manifestPlaceholders["SERVICE_URL"] = accessManagerProp.getProperty("SERVICE_URL"))//服务器url
                    (manifestPlaceholders["SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("SERVICE_URL_FOREIGN"))//国外服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL"] = accessManagerProp.getProperty("TRACKING_SERVICE_URL"))//埋点服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("TRACKING_SERVICE_URL_FOREIGN"))//埋点国外服务器url
                    break
                case 1:
                    (manifestPlaceholders["SERVICE_URL"] = accessManagerProp.getProperty("SERVICE_DEBUG_URL"))  //服务器url
                    (manifestPlaceholders["SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("SERVICE_DEBUG_URL"))//国外服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_URL"))//埋点服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_URL"))//埋点国外服务器url
                    break
                case 2:
                    (manifestPlaceholders["SERVICE_URL"] = accessManagerProp.getProperty("SERVICE_DEBUG_NATIVE_URL"))  //服务器url
                    (manifestPlaceholders["SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("SERVICE_DEBUG_NATIVE_URL"))//国外服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_NATIVE_URL"))//埋点服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_NATIVE_URL"))//埋点国外服务器url
                    break
            }
            (manifestPlaceholders["CONFIG_CHANGES"] = "locale|keyboard|keyboardHidden|navigation|screenLayout|fontScale|uiMode|orientation|screenSize|smallestScreenSize")
            (manifestPlaceholders["AMAP_API_KEY"] = accessManagerProp.getProperty("AMAP_API_KEY"))
            (manifestPlaceholders["GOOGLE_MAP_API_KEY"] = accessManagerProp.getProperty("GOOGLE_MAP_API_KEY"))
            (manifestPlaceholders["SERVICE_STRAVA_URL"] = accessManagerProp.getProperty("SERVICE_STRAVA_URL"))
        }
        debug {
            minifyEnabled false     //关闭混淆
            shrinkResources false   //用反射机制来加载图片或布局添加时false
            signingConfig signingConfigs.release
            switch (debugUrl) {
                case 0:
                    (manifestPlaceholders["SERVICE_URL"] = accessManagerProp.getProperty("SERVICE_URL"))//服务器url
                    (manifestPlaceholders["SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("SERVICE_URL_FOREIGN"))//国外服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL"] = accessManagerProp.getProperty("TRACKING_SERVICE_URL"))//埋点服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("TRACKING_SERVICE_URL_FOREIGN"))//埋点国外服务器url
                    break
                case 1:
                    (manifestPlaceholders["SERVICE_URL"] = accessManagerProp.getProperty("SERVICE_DEBUG_URL"))  //服务器url
                    (manifestPlaceholders["SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("SERVICE_DEBUG_URL"))//国外服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_URL"))//埋点服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_URL"))//埋点国外服务器url
                    break
                case 2:
                    (manifestPlaceholders["SERVICE_URL"] = accessManagerProp.getProperty("SERVICE_DEBUG_NATIVE_URL"))  //服务器url
                    (manifestPlaceholders["SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("SERVICE_DEBUG_NATIVE_URL"))//国外服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_NATIVE_URL"))//埋点服务器url
                    (manifestPlaceholders["TRACKING_SERVICE_URL_FOREIGN"] = accessManagerProp.getProperty("TRACKING_SERVICE_DEBUG_NATIVE_URL"))//埋点国外服务器url
                    break
            }
            (manifestPlaceholders["CONFIG_CHANGES"] = "locale|keyboard|keyboardHidden|navigation|screenLayout|fontScale|uiMode|orientation|screenSize|smallestScreenSize")
            (manifestPlaceholders["AMAP_API_KEY"] = accessManagerProp.getProperty("AMAP_API_KEY"))
            (manifestPlaceholders["GOOGLE_MAP_API_KEY"] = accessManagerProp.getProperty("GOOGLE_MAP_API_KEY"))
            (manifestPlaceholders["SERVICE_STRAVA_URL"] = accessManagerProp.getProperty("SERVICE_STRAVA_URL"))
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.java_version
        targetCompatibility rootProject.ext.java_version
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.java_version
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    android.buildFeatures.viewBinding = true

    android.applicationVariants.all { variant ->
        //apk打包名称
        variant.outputs.all {
            outputFileName = "Android_Lit Brick_" +
                    new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC")) +
                    "_V${variant.versionName}" +
                    versionSuffix(variant) +
                    ".apk"
        }
    }

    //使用aar文件不需要如下配置
    //直接使用module需要配置如下：
    flavorDimensions "manufacturer" //维度标识
    productFlavors {
        zhBle {}
    }

    dexOptions {
        //使用增量模式构建
        incremental true
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = true
        //线程数
        threadCount = 8
    }
    packagingOptions {
        resources {
            excludes += ['**.proto']
        }
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    //pinyin4j-2.5.0.jar            ---->   汉字转拼音库
    //zhbracelet-health_sdk-1.8.aar ---->   ECG算法库

    //https://mvnrepository.com/ 搜索库最新版本
    //androidx.appcompat  API 31 最高适配 1.4.2
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // 通用库提供扩展程序 API 31 最高适配 1.8.0
    implementation 'androidx.core:core-ktx:1.8.0'
    // ViewModel LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    //region ktx
    // 简化 Fragment API
    implementation 'androidx.fragment:fragment-ktx:1.5.2'
    // 为每个 Lifecycle 对象定义一个 LifecycleScope
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
    // LiveData 构建器  liveData { ...emit(data) } 可以在定义LiveData的同时实现更新逻辑
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
    // lifecycle注解处理器
    //annotationProcessor "androidx.lifecycle:lifecycle-compiler:2.5.1"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.5.1"
    // ViewModel提供了viewModelScope() kotlin协程等
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    //viewmodel-ktx 内置 implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
    //viewmodel-ktx 内置 implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jvm:1.6.1'
    // work-runtime
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    //endregion
    //ZH BLE SDK
    implementation project(path: ':PublicOneSdk')
    zhBleImplementation project(path: ':PublicOneSdk')
    //相机库
    implementation project(path: ':mycamera')
    //protobuf
    implementation 'com.google.protobuf:protobuf-java:3.20.1'
    //网络
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.10.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation "io.reactivex.rxjava2:rxjava:2.2.21"
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3'
    //数据库
    implementation 'org.litepal.guolindev:core:3.2.3'
    //沉浸式状态栏
    implementation 'com.gyf.immersionbar:immersionbar:2.3.3'
    //二维码扫描
    //https://gitee.com/hms-core/hms-scan-demo
    //https://developer.huawei.com/consumer/cn/doc/development/HMSCore-Guides/android-version-change-history-0000001050043947
    implementation 'com.huawei.hms:scanplus:2.9.0.300'
    //上拉下载控件
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.3'
    implementation 'com.scwang.smart:refresh-header-classics:2.0.3'
    implementation 'com.scwang.smart:refresh-footer-classics:2.0.3'
    //eventbus
    implementation 'org.greenrobot:eventbus:3.3.1'
    //fastjson
    implementation 'com.alibaba:fastjson:1.2.68'
    //日历
    implementation 'com.haibin:calendarview:3.7.1'
    //gson
    implementation 'com.google.code.gson:gson:2.9.0'
    //工具
    implementation 'com.blankj:utilcodex:1.31.1'
    //高德地图
    implementation 'com.amap.api:3dmap:8.0.1'
    implementation 'com.amap.api:location:5.5.0'
    //google地图
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    //Google Fit
    implementation 'com.google.android.gms:play-services-fitness:21.0.1'
    implementation 'com.google.android.gms:play-services-auth:20.2.0'
    //circle imageview
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    //glide
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    kapt  'com.github.bumptech.glide:compiler:4.15.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.15.1'
    implementation ('com.github.bumptech.glide:okhttp3-integration:4.15.1'){
        exclude group: 'glide-parent'
    }
    //Luban 图片压缩
    implementation 'top.zibin:Luban:1.1.8'
    //bugly
    implementation 'com.tencent.bugly:crashreport:3.4.4'
    //gpx解析生成  https://github.com/himanshu-soni/gpx-parser
    implementation 'me.himanshusoni.gpxparser:gpx-parser:1.13'
    //图片裁剪
    implementation 'com.github.yalantis:ucrop:2.2.8'
    //emoji
    implementation 'com.vdurmont:emoji-java:5.1.1'
    //内存泄露检测
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
    //思澈sdk ota :SifliDFU, 表盘：serialTransport watchfacelibrary
    implementation files('libs/SifliDFU-release.aar')
    implementation files('libs/serialTransport-release.aar')
    implementation files('libs/watchfacelibrary-release.aar')
}

//获取版本名称后缀
static def versionSuffix(variant) {
    def vn = variant.versionName as String
    def vns = vn.split("\\.")
    if (vns[2] == "0") {
        return "" //临时正式包增加后缀
    } else {
        return "_Beta"
    }
}